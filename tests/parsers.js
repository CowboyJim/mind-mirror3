/**
 * Created by jim on 5/13/15.
 */

'use strict';
var assert = require("assert");
var fs = require('fs');
var parsers = require('../parsers');
var EventEmitter = require('events').EventEmitter;
var winston = require('winston');

winston.level = 'debug';

var testFile1 = "tests/mm3_capture_file1";

var testData =
	[0x3f, 0x0a, 0x0d, 0x3f, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x0a, 0x0d, 0x53, 0x79, 0x73,
		0x74, 0x65, 0x6d, 0x20, 0x75, 0x70, 0x0a, 0x0d, 0x05, 0x27, 0x5b, 0x04, 0x01, 0x60, 0x03, 0x01,
		0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04,
		0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0a,
		0x27, 0x3e, 0x04, 0x02, 0x60, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0x08, 0x06, 0x04, 0x01,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff, 0xff, 0xff, 0x08, 0x06, 0x04, 0x01, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0x40, 0x04, 0x03, 0x60, 0x03, 0x03, 0x00, 0x00,
		0xff, 0xff, 0xff, 0x08, 0x06, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff,
		0xff, 0xff, 0x08, 0x06, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0a, 0x27, 0xf8,
		0x04, 0x04, 0x60, 0x03, 0x04, 0x00, 0x00, 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0xfa, 0x04, 0x05, 0x61, 0x03, 0x05, 0x00, 0x00, 0xff, 0x24,
		0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff, 0x24, 0x0d,
		0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, 0xf3, 0x04, 0x06,
		0x61, 0x03, 0x06, 0x00, 0x00, 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x02, 0x00, 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x02, 0x05, 0x27, 0xf6, 0x04, 0x07, 0x61, 0x03, 0x07, 0x00, 0x00, 0xff, 0x24, 0x0d, 0x00,
		0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff, 0x24, 0x0d, 0x00, 0x00,
		0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, 0xfd, 0x04, 0x00, 0x61, 0x03,
		0x08, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x05, 0x27, 0x00, 0x04, 0x01, 0x61, 0x03, 0x09, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, 0xf9, 0x04, 0x02, 0x61, 0x03, 0x0a, 0x00,
		0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
		0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27,
		0xfc, 0x04, 0x03, 0x61, 0x03, 0x0b, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, 0x41, 0x04, 0x04, 0x61, 0x03, 0x0c, 0x00, 0x00, 0x06,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0x44, 0x04,
		0x05, 0x61, 0x03, 0x0d, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x02, 0x0a, 0x27, 0x3d, 0x04, 0x06, 0x61, 0x03, 0x0e, 0x00, 0x00, 0x06, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0x40, 0x04, 0x07, 0x61];


describe('Parser tests', function () {
	var file1Buffer;
	var eventEmitter;
	var counter = 0;

	before(function () {
		counter = 0;
		file1Buffer = fs.readFileSync(testFile1);
		eventEmitter = new EventEmitter();
		eventEmitter.addListener('data',function(data){
			//console.log("event received: " + data.length);
			counter++;
		});
	});

	describe('Find beginning of random stream', function (done) {
		this.timeout(10000);

		it('should return 11', function (done) {

			var buffer = new Buffer(testData);

			var parser = parsers.parser(true)(eventEmitter, buffer);
			console.log("Counter: " + counter);
			//assert(counter == 15);

			//done();

		});
	})

});

